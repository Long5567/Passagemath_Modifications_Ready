name: Prepare Windows wheels

on:
  pull_request:
    paths:
      - '**'
      - '!.github/workflows/**'
      - '!*.md'
      - '!*.txt'
      - '!condarc.yml'
      - '!environment*.yml'
      - '!pyrightconfig.json'
      - '!src/doc/**'
      - '!tools/**'
      - '.github/workflows/dist.yml'
  merge_group:
  push:
    branches:
      - '*windows*'
    tags:
      # Match all release tags including beta, rc
      - 'passagemath-[0-9]+.[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.beta[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.[0-9]+.beta[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.rc[0-9]+'
      - 'passagemath-[0-9]+.[0-9]+.[0-9]+.rc[0-9]+'

  workflow_dispatch:
    # Allow to run manually

concurrency:
  # Cancel previous runs of this workflow for the same branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  sdists_for_pypi:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache sdists
        id: cache-sdists
        uses: actions/cache@v4
        with:
          path: dist
          # FIXME: hashFiles returns empty
          key: "sdists-${{ hashFiles('/build/**/*', '/src/**/*', '/pkgs/**/*') }}"

      - name: Install bootstrap prerequisites
        if: steps.cache-sdists.outputs.cache-hit != 'true'
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install $(build/bin/sage-get-system-packages debian _bootstrap)

      - name: Cache SAGE_LOCAL
        if: steps.cache-sdists.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            config.status
            local
          key: "sdists-SAGE_LOCAL-${{ hashFiles('/build/**/*') }}"

      - name: make pypi-sdists
        if: steps.cache-sdists.outputs.cache-hit != 'true'
        run: |
          ./bootstrap
          if [ -x ./config.status ]; then ./config.status; else ./configure; fi
          make pypi-sdists V=0
          (mkdir dist && mv upstream/*sage*.tar.gz dist/)
          ls -l dist
      - uses: actions/upload-artifact@v4
        with:
          path: "dist/*.tar.gz"
          name: dist-windows
      - name: twine check
        if: steps.cache-sdists.outputs.cache-hit != 'true'
        run: |
          ./sage -pip install twine
          ./sage -sh -c 'twine check dist/*.tar.gz'

  noarch_wheels_for_pypi:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache noarch-wheels
        id: cache-noarch-wheels
        uses: actions/cache@v4
        with:
          path: dist
          # FIXME: hashFiles returns empty
          key: "noarch-wheels-${{ hashFiles('/build/**/*', '/src/**/*', '/pkgs/**/*') }}"

      - name: Install bootstrap prerequisites
        if: steps.cache-noarch-wheels.outputs.cache-hit != 'true'
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install $(build/bin/sage-get-system-packages debian _bootstrap)

      - name: make pypi-noarch-wheels
        if: steps.cache-noarch-wheels.outputs.cache-hit != 'true'
        run: |
          ./bootstrap
          ./configure
          make pypi-noarch-wheels V=0
          (mkdir dist && mv venv/var/lib/sage/wheels/*sage*-none-any.whl dist/)
          ls -l dist

      - uses: actions/upload-artifact@v4
        with:
          path: "dist/*.whl"
          name: noarch-wheels-windows

  build_wheels:
    name: wheels ${{ matrix.build }}*_${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs: [sdists_for_pypi, noarch_wheels_for_pypi]
    strategy:
      fail-fast: false
      matrix:
        os:      [windows-2022]
        arch:    [auto]
        build:   ["win_*64"]
    env:
      # SPKGs to install as system packages
      SPKGS: _bootstrap _prereq openssl curl readline liblzma libffi bzip2 zlib info libxml2 gdbm ${{ startsWith(matrix.os, 'macos') && 'gfortran' || '' }}
      # Non-Python packages to install as spkgs
      TARGETS_PRE: ccache libpng gmp mpfr mpc mpfi givaro boost_cropped cliquer glpk libhomfly gsl pari ntl flint iml lcalc libbraiding m4ri m4rie planarity rw symmetrica gap cddlib nauty gfan ecm tachyon pip
      CIBW_BUILD: "*${{ matrix.build }}*"
      # Disable building PyPy wheels on all platforms
      CIBW_SKIP: "pp*"
      #
      CIBW_ARCHS: ${{ matrix.arch }}
      # https://cibuildwheel.readthedocs.io/en/stable/options/#requires-python
      CIBW_PROJECT_REQUIRES_PYTHON: ${{ github.event_name == 'pull_request' && '>=3.10, <3.11' || '>=3.10, <3.14' }}
      # Run before wheel build
      CIBW_BEFORE_BUILD: |
        (echo "passagemath-conf @ file://$(pwd)/pkgs/sage-conf" && echo "passagemath-setup @ file://$(pwd)/pkgs/sage-setup") > constraints.txt
      # Environment during wheel build
      CIBW_ENVIRONMENT: "PATH=$(pwd)/prefix/bin:$PATH CPATH=$(pwd)/prefix/include:$CPATH LIBRARY_PATH=$(pwd)/prefix/lib:$LIBRARY_PATH PKG_CONFIG_PATH=$(pwd)/prefix/lib/pkgconfig:$PKG_CONFIG_PATH ACLOCAL_PATH=/usr/share/aclocal LINBOX_CONFIGURE=--without-ntl GIAC_CONFIGURE=--disable-ntl SAGE_MACAULAY2_BUILD_OPTIONS=-DWITH_PYTHON=off PIP_CONSTRAINT=$(pwd)/constraints.txt PIP_FIND_LINKS=file://$(pwd)/wheelhouse' 'file://$(pwd)/dist SAGE_NUM_THREADS=6 ${{ startsWith(matrix.os, 'macos') && 'FC=gfortran-14 LDFLAGS=\"-Wl,-ld_classic -Wl,-headerpad_max_install_names $LDFLAGS\"' || '' }}"
      # Use 'build', not 'pip wheel'
      CIBW_BUILD_FRONTEND: build
      # Without setting LD_LIBRARY_PATH, we get Cannot repair wheel, because required library "libm4ri-0.0.20200125.so" could not be located
      CIBW_REPAIR_WHEEL_COMMAND_LINUX: "set -x && export LD_LIBRARY_PATH=$(pwd)/prefix/lib:$LD_LIBRARY_PATH && pkg=$(basename {wheel}) && pkg=${pkg%%-*} && pkg=${pkg//_/-} && pkg=${pkg#pas} && if [ -r pkgs/$pkg/repair_wheel.py ]; then python3 -m pip install passagemath-conf auditwheel && python3 pkgs/$pkg/repair_wheel.py {wheel}; fi && auditwheel --version && auditwheel -v -v -v -v repair -w {dest_dir} {wheel}"
      CIBW_REPAIR_WHEEL_COMMAND_MACOS: "set -x && export DYLD_FALLBACK_LIBRARY_PATH=$(pwd)/prefix/lib:$DYLD_FALLBACK_LIBRARY_PATH && pkg=$(basename {wheel}) && pkg=${pkg%%-*} && pkg=${pkg//_/-} && pkg=${pkg#pas} && if [ -r pkgs/$pkg/repair_wheel.py ]; then python3 -m pip install passagemath-conf auditwheel && python3 pkgs/$pkg/repair_wheel.py {wheel}; fi && delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
      # to avoid "DelocationError: Library dependencies do not satisfy target MacOS version 10.9"
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-13' && '13.0' || '14.0' }}
      # Avoid onetbb build failure on manylinux2014 (https://github.com/passagemath/passagemath/issues/460)
      # manylinux_2_28 will be default from May 2025 - https://cibuildwheel.pypa.io/en/stable/options/#linux-image
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
      # Avoid ancient zlib on manylinux2014
      CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
      #
      CIBW_PLATFORM: windows
    steps:
      - name: Maximize build disk space
        if: runner.os == 'Linux' && matrix.arch != 'aarch64'
        uses: easimon/maximize-build-space@v10
        with:
          # need space in /var for Docker images
          root-reserve-mb:      30000
          remove-dotnet:        true
          remove-android:       true
          remove-haskell:       true
          remove-codeql:        true
          remove-docker-images: true

      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux' && matrix.arch != 'x86_64' && matrix.arch != 'i686' && matrix.arch != 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - uses: msys2/setup-msys2@v2
        name: Setup msys2
        with:
          install: >-
            mingw-w64-ucrt-x86_64-gcc
            autotools
            python
            python-pip
            python-setuptools
          msystem: ucrt64
          path-type: inherit
        if: matrix.os == 'windows-2022'

      - name: Download sdists
        uses: actions/download-artifact@v4
        with:
          name: dist-windows
          path: dist

      - name: Download noarch-wheels
        uses: actions/download-artifact@v4
        with:
          name: noarch-wheels-windows
          path: dist

      - uses: actions/setup-python@v5
        # As of 2024-02-03, the macOS M1 runners do not have preinstalled python or pipx.
        # Installing pipx follows the approach of https://github.com/pypa/cibuildwheel/pull/1743
        id: python
        with:
          python-version: "3.10 - 3.12"
          update-environment: false
        if: matrix.os != 'windows-2022'

      - name: Retrieve configure tarball cache
        id: cache-configure
        uses: actions/cache/restore@v4
        with:
          path: |
            build/pkgs/configure
            upstream/configure*
          key: "configure-${{ hashFiles('/build/**/*') }}"

      - name: Bootstrap
        if: steps.cache-configure.outputs.cache-hit != 'true'
        # Patch python3 spkg-configure to allow Python 3.9.0 during the CIBW_BEFORE_ALL phase
        run: |
          export PATH=$(pwd)/build/bin:$PATH
          eval $(sage-print-system-package-command auto --sudo --yes update) || eval $(sage-print-system-package-command auto --yes update)
          eval $(sage-print-system-package-command auto --sudo --yes --no-install-recommends --spkg install _bootstrap bzip2 xz liblzma) || eval $(sage-print-system-package-command auto --yes --no-install-recommends --spkg install _bootstrap bzip2 xz liblzma)
          sed -i.bak '/m4_pushdef.*MIN_VERSION/s/3[0-9.]*/3.9.0/' build/pkgs/python3/spkg-configure.m4
          ./bootstrap -s
        shell: msys2 {0}

      - name: Save configure tarball cache
        if: steps.cache-configure.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            build/pkgs/configure
            upstream/configure*
          key: ${{ steps.cache-configure.outputs.cache-primary-key }}

      - name: Retrieve SAGE_LOCAL cache
        id:   cache-sage-local
        uses: actions/cache/restore@v4
        with:
          path: |
            /sage-*
            ~/sage-*
          key: ${{ runner.os }}-cibuildwheel-${{ matrix.arch }}-${{ matrix.build }}

      - name: Unpack and prepare
        id: unpack
        # We build the wheels from the sdists so that MANIFEST filtering becomes effective.
        # But we must run cibuildwheel with the unpacked source directory, not a tarball,
        # so that SAGE_ROOT is copied into the build containers.
        #
        # In the CIBW_BEFORE_ALL phase, we install libraries using the Sage distribution.
        # https://cibuildwheel.readthedocs.io/en/stable/options/#before-all
        # For Linux, this is repeated for each of the packages that we build wheels for
        # because CIBW starts with a fresh container on each invocation.
        # Therefore we cache it in a directory mounted from the host: /host
        # https://cibuildwheel.pypa.io/en/stable/faq/#linux-builds-in-containers
        #
        # - configure --with-sage-venv makes the SAGE_VENV separate from SAGE_LOCAL.
        #   SAGE_LOCAL is put in PATH for the wheel building.
        #   SAGE_VENV must not be in PATH so it does not shadow cibuildwheel's build tools.
        #
        run: |
          if [ -n "${{ steps.python.outputs.python-path }}" ]; then "${{ steps.python.outputs.python-path }}" -m pip install setuptools; fi
          . ./.homebrew-build-env 2> /dev/null || :
          if [ ! -x ./configure ]; then ./bootstrap -D && touch configure; fi
          status=0; ./configure --with-python="${{ steps.python.outputs.python-path || 'python3' }}" --with-system-python3=force --disable-python-distutils-check --prefix=$HOME/runner-venv || status=$? || :
          (echo && echo ::group::config.log && cat config.log && echo ::endgroup:: && exit $status)
          make cibuildwheel
          export PATH=build/bin:$PATH
          echo CIBW_BEFORE_ALL="echo > constraints.txt && ( $(sage-print-system-package-command debian update) && $(sage-print-system-package-command debian --yes --no-install-recommends install $(sage-get-system-packages debian $SPKGS) zip) || $(sage-print-system-package-command fedora --yes --no-install-recommends install $(sage-get-system-packages fedora $SPKGS | sed s/pkg-config/pkgconfig/) zip) || ( $(sage-print-system-package-command homebrew --yes --no-install-recommends install $(sage-get-system-packages homebrew $SPKGS)) || $(sage-print-system-package-command alpine --yes --no-install-recommends install $(sage-get-system-packages alpine $SPKGS) zip) || echo error ignored) ) && . ./.homebrew-build-env 2> /dev/null; rm -f config.status && PREFIX=${{ startsWith(matrix.os, 'ubuntu') && '/host/sage-\$AUDITWHEEL_PLAT' || '\$HOME/sage-local' }} && if cp \$PREFIX/config.status . 2>/dev/null; then chmod +x config.status; fi && if [ -x ./config.status ]; then ./config.status; else rm -f prefix && ./configure --enable-build-as-root --prefix=\$PREFIX --with-sage-venv --with-system-gfortran=force --with-system-python3=force --without-system-libpng; status=$?; echo && echo ::group::config.log && cat config.log && echo ::endgroup:: && (exit $status) && cp config.status prefix/ && (MAKE=\"make -j6\" make -k V=0 $TARGETS_PRE || echo error ignored); fi && rm -rf prefix/lib/gap/pkg/{transgrp/data,ctbllib/data,tomlib/data,irredsol/data} prefix/share/gap/doc && for a in \$(find prefix/lib -type f -name 'lib*'); do case \$a in *flint*|*gf2x*|*gmp*|*gsl*|*mpfr*|*ntl*|*openblas*|*normaliz*) strip -x \$a;; esac; done; for a in \$(find prefix/bin -type f); do case \$a in *M2-binary*) strip -x \$a;; esac; done" >> "$GITHUB_ENV"
          mkdir -p unpacked
          for sdist in dist/$pkg*.tar.gz; do
              (cd unpacked && tar xfz - ) < $sdist
          done
        shell: msys2 {0}

      - name: sagemath-objects
        id:   sagemath-objects
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*objects*
        shell: msys2 {0}

      - name: Save SAGE_LOCAL cache
        if:   (success() || failure()) && steps.unpack.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: |
            /sage-*
            ~/sage-*
          key: ${{ steps.cache-sage-local.outputs.cache-primary-key }}

        ####### sagemath-categories and what depends on it

      - name: sagemath-categories
        id:   sagemath-categories
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*categories*
        shell: msys2 {0}

      - name: sagemath-glpk
        id:   sagemath-glpk
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*glpk*
        shell: msys2 {0}

      - name: sagemath-homfly
        id:   sagemath-homfly
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*homfly*
        shell: msys2 {0}

      - name: sagemath-combinat
        id:   sagemath-combinat
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*combinat*
        shell: msys2 {0}

      - name: sagemath-graphs
        id:   sagemath-graphs
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*graphs*
        shell: msys2 {0}

      - name: sagemath-planarity
        id:   sagemath-planarity
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*planarity*
        shell: msys2 {0}

      - name: sagemath-rankwidth
        id:   sagemath-rankwidth
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*rankwidth*
        shell: msys2 {0}

      - name: sagemath-tachyon
        id:   sagemath-tachyon
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*tachyon*
        shell: msys2 {0}

        ####### sagemath-modules and what depends on it

      - name: sagemath-modules
        id:   sagemath-modules
        if:   (success() || failure()) && steps.sagemath-categories.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*modules*
        shell: msys2 {0}

      - name: sagemath-plot
        id:   sagemath-plot
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*plot*
        shell: msys2 {0}

      - name: sagemath-polyhedra
        id:   sagemath-polyhedra
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*polyhedra*
        shell: msys2 {0}

      - name: sagemath-ntl
        id:   sagemath-ntl
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*ntl*
        shell: msys2 {0}

      - name: sagemath-flint
        id:   sagemath-flint
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*flint*
        shell: msys2 {0}

      - name: sagemath-pari
        id:   sagemath-pari
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*pari*
        shell: msys2 {0}

      - name: sagemath-cddlib
        id:   sagemath-cddlib
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*cddlib*
        shell: msys2 {0}

      - name: sagemath-gfan
        id:   sagemath-gfan
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*gfan*
        shell: msys2 {0}

      - name: sagemath-nauty
        id:   sagemath-nauty
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*nauty*
        shell: msys2 {0}

      - name: sagemath-libecm
        id:   sagemath-libecm
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*libecm*
        shell: msys2 {0}

      - name: sagemath-lcalc
        id:   sagemath-lcalc
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*lcalc*
        shell: msys2 {0}

      - name: sagemath-libbraiding
        id:   sagemath-libbraiding
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*libbraiding*
        shell: msys2 {0}

      - name: sagemath-gap
        id:   sagemath-gap
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*gap*
        shell: msys2 {0}

      - name: sagemath-groups
        id:   sagemath-groups
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath*groups*
        shell: msys2 {0}

      - name: sagemath-cliquer
        id:   sagemath-cliquer
        if:   (success() || failure()) && steps.sagemath-modules.outcome == 'success'
        run: |
          ~/runner-venv/bin/python3 -m cibuildwheel unpacked/*sagemath_cliquer*
        shell: msys2 {0}


      - uses: actions/upload-artifact@v4
        if:   always()
        with:
          name: ${{ matrix.os }}-${{ matrix.build }}-${{ matrix.arch }}-wheels
          path: ./wheelhouse/*.whl


  upload_wheels:
    # This needs to be a separate job because pypa/gh-action-pypi-publish cannot run on macOS
    needs: [sdists_for_pypi, noarch_wheels_for_pypi, build_wheels]
    if: (success() || failure()) && startsWith(github.ref, 'refs/tags')
    uses: ./.github/workflows/pypi-publish.yml
    secrets: inherit

  # tox:
  #   needs: [sdists_for_pypi, noarch_wheels_for_pypi, build_wheels]
  #   if: (success() || failure())
  #   uses: ./.github/workflows/ci-wheels.yml
  #   with:
  #     run-id: ${{ github.run_id }}
  #     oss: "['windows-2022']"
